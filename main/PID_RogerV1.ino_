
#include "pid.h"  //since system did not have pid.h library
#include "vector.h"
#include <SoftwareSerial.h>

EEProj::Pid<1> height_pid(0.99,3,0,LOCATION);
EEProj::Pid<1> horizon_pid(0.99,3,0,LOCATION);//parameters need to be reset 
EEProj::Vector<1> output;

SoftwareSerial iBeaconSerial(10, 11); //RX|TX  // reading data from iBeacon
SoftwareSerial sensorSerial(A4, A5); //RX|TX  // reading data from sensor
//------------------------For height_PID control-----------------------------
unsigned long lasttime;
double target = 1000; //set target height to 1000mm
double input_Sensor = 0;
double heightPID_Output = 0;
int PWMvalue = 0;
//------------------------For horizon_PID control-----------------------------
   //manage RSSI
//-----------------------For laser sensor------------------------------------
unsigned char re_Buf[11], counter = 0;
unsigned char sign = 0;
byte data_Buf[3] = {0};
uint16_t distance = 0;
//-----------------------Pin statement---------------------------------------
int PWM_U = 1; //assume pin 1 on Arduino board
int DIR_U = 2;
int PWM_L = 3; //assume pin 3 on Arduino board
int DIR_L = 4;
int PWM_R = 5; //assume pin 5 on Arduino board
int DIR_R = 6;
//--------------------------------------------------------------------------
void setup() {
  Serial.begin(115200);
  //iBeaconSerial.begin(115200);
  //sensorSerial.begin(115200);
  while (!Serial);
  pinMode (PWM_U, OUTPUT);
  pinMode (DIR_U, OUTPUT);
  pinMode (PWM_L, OUTPUT);
  pinMode (DIR_R, OUTPUT);
  pinMode (PWM_L, OUTPUT);
  pinMode (DIR_R, OUTPUT);
}
   
void loop() {                                      
//--------------------------------laser senssor part--------------------
  if (sensorSerial.available()) {
    unsigned char i = 0, sum = 0;
    unsigned char RangeStatus = 0, Time = 0, Mode = 0;
    while (sensorSerial.available()) {
      re_Buf[counter] = (unsigned char)sensorSerial.read();
      if (counter == 0 && re_Buf[0] != 0x5A) return;
      counter++;
      if (counter == 8) {
        counter = 0;
        sign = 1;
      }
    }
    if (sign) {
      sign = 0;
      for (i = 0; i < 7; i++)
        sum += re_Buf[i];
      if (sum == re_Buf[i]) {
        data_Buf[0] = re_Buf[4];
        data_Buf[1] = re_Buf[5];
        data_Buf[2] = re_Buf[6];
        distance = data_Buf[0] << 8 | data_Buf[1];
        RangeStatus = (data_Buf[2] >> 4) & 0x0f;
        Time = (data_Buf[2] >> 2) & 0x03;
        Mode = data_Buf[2] & 0x03;
        
        input_Sensor = distance;
      }
    }
  }
  ////////////////opeation of Height////////////////////
  double error = target - input_Sensor;
  height_pid.newInput(error, false, (micros() - lasttime));
  lasttime = micros();
  output = height_pid.get_pid();
  heightPID_Output = output.x();       
  
  //PWM = PWM + (heightPID_Output/target)*255; 
  //Serial.print(heightPID_Output);
  
  PWMvalue = round(heightPID_Output);
  analogWrite(PWM_U, PWMvalue);
  if (heightPID_Output >= 0) //airship is undter the target height==> move upward
    digitalWrite(DIR_U, HIGH);
  else if (heightPID_Output >= 0)//airship is over the target height==> move downward
    digitalWrite(DIR_U, LOW);
  ///////////////////////////////////////////////////////
}


