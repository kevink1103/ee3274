#include  <SoftwareSerial.h>
#include  <EEPROM.h>
#include  <String.h>
#include  "vector.h"
#include  "pid.h"

//*********(  Definitions  )*********\\

//**      Genaral Definitions:
#define   NO false
#define   YES true
#define   notExist -1

//**      defines for IMU parameters:
#define   isYPR 1
#define   isADC 2

#define   BTO 0
#define   IBE 1
#define   IMU 2
#define   TOF 3

#define   YAW 0
#define   PITCH 1
#define   ROLL 2
#define   HIGHT 3
#define   TEMPERATURE 4
#define   PRESSURE 5 /*   << About Pressure >>                    *
                          Which starting point is from 100000.    
                          e.g.: Read 2000,                        
                          means that actual pressure is :         
                          100000 + 2000 = 102000Pa.               */

//**      defines for TOF parameters:
#define   DISTANCE 0
#define   DATASTATUS 1 /* TOF_results[1]: 
                          0  - Valid Data;
                          1  - Strong Interference;
                          2  - Weak Signal;
                          4  - Out of Measurement Range;
                          5  - Hardware Error;
                          7  - Strong Noise;
                          8  - Runtime Error;
                          14 - Invalid Data.                      */
#define   MEASURETIME 2
#define   LASERPOWER 3 /* TOF_results[3]: 
                          1  - Weak   (Short  Measurement Range);
                          2  - Medium (Medium Measurement Range);
                          3  - Strong (Long   Measurement Range); */

//**      defines for UARTs Serial Transmission:
#define   BAUD_RATE 115200

//**    Pin Definitions:
#define   IMU_RX 4
#define   IMU_TX 5
#define   IBE_RX A4
#define   IBE_TX A5
#define   BTO_RX A2
#define   BTO_TX A3
#define   TOF_RX A0
#define   TOF_TX A1

//**      defines for motor control:
#define   LEFT 0
#define   RIGHT 1
#define   UPWARD 2

//**    Pin Definitions:
#define   MOTOR_L_PWM 11
#define   MOTOR_L_DIR 8
#define   MOTOR_U_PWM 10
#define   MOTOR_U_DIR 7
#define   MOTOR_R_PWM 9
#define   MOTOR_R_DIR 6


//*********(  Global Variables  )*********\\

//**                UARTs Serial Transmitting System
SoftwareSerial      IMU_Serial(IMU_RX, IMU_TX); //RX|TX
SoftwareSerial      IBE_Serial(IBE_RX, IBE_TX); //RX|TX
SoftwareSerial      BTO_Serial(BTO_RX, BTO_TX); //RX|TX
SoftwareSerial      TOF_Serial(TOF_RX, TOF_TX); //RX|TX

//**                PID Controlling System
EEProj::Pid<1>      PID_RSSI_CW(1, 0, 0, LOCATION);
EEProj::Pid<1>      PID_Height(0.11, 0.00075, 0, LOCATION);

//**                Motor Controlling System
int8_t              power = 30;  //In percentage
int8_t              SpeedOf[3] = {0, 0, 0}; /*   << About SpeedOf[3] >>                                *
                                                 "SpeedOf[LEFT]", "SpeedOf[RIGHT]", "SpeedOf[UPWARD]"
                                                 for calling is better to understand.
                                                 Mention that the value must be within -100 and 100.   */

//**                IMU Measurement System
//EEProj::Vector<1>   Target_Height(0);          //represent by 1D Vector
//EEProj::Vector<1>   FdBack_Height(0);          //represent by 1D Vector
//EEProj::Vector<1>   Output_Height(0);          //represent by 1D Vector

//int                 IntYPR[6];

//**                iBeacon Locating System
//EEProj::Vector<1>   Target_RSSI_CW(0);    //represent by 1D Vector
//EEProj::Vector<1>   FdBack_RSSI_CW(0);    //represent by 1D Vector
//EEProj::Vector<1>   Output_RSSI_CW(0);    //represent by 1D Vector

//int                 IntDistance = 0;
//int                 IntRSSI = 0;
uint8_t             nRSSI = 5;
int                 *ArrRSSI = NULL;

//**                Time-of-Flight Range Finder System
int                 TOF_results[2];


//**                Bluetooth Communication System
//String              BTOdata = "";

//**                PID Timer/Synchromenizing System
uint32_t            lastTime_RSSI = micros();
uint32_t            lastTime_Height = micros();


//**                Global Genaral Variable
/*
  uint8_t             gCount = 0;
  uint8_t             times_per_cycle[3] = {1, 1, 1};
  uint8_t             Ori_Count = 0;
  uint8_t             Dir_Count = 0;
  uint8_t             Hei_Count = 0;
*/


//*********(  Algorithm Functions  )*********\\

void BeginSerial(const uint8_t& SerialID)
{
  switch (SerialID) {
    case BTO:
      IBE_Serial.end();
      IMU_Serial.end();
      TOF_Serial.end();
      BTO_Serial.begin(BAUD_RATE);
      while (!BTO_Serial);
      break;
    case IBE:
      BTO_Serial.end();
      IMU_Serial.end();
      TOF_Serial.end();
      IBE_Serial.begin(BAUD_RATE);
      while (!IBE_Serial);
      break;
    case IMU:
      IBE_Serial.end();
      BTO_Serial.end();
      TOF_Serial.end();
      IMU_Serial.begin(BAUD_RATE);
      while (!IMU_Serial);
      break;
    case TOF:
      IBE_Serial.end();
      BTO_Serial.end();
      IMU_Serial.end();
      TOF_Serial.begin(BAUD_RATE);
      while (!TOF_Serial);
  }
}


int readTOF()
{ //return STATE(Validation) of data [NOT RESULT !!!!!!!]
  byte _buffer[10];
  byte Temp = 0;
  uint8_t Type = 0;
  uint8_t count = 0;
  uint8_t len = 0;
  uint16_t checksum = 0;

  BeginSerial(TOF);

  //detect starting identication
  count = 2;
  while (count > 0) {
    while (TOF_Serial.available() == 0);
    Temp = (byte)TOF_Serial.read();
    if (Temp == 0x5a)
      count--;
    else
      count = 2;
  }
  //get MSG type
  while (TOF_Serial.available() == 0);
  Type = (uint8_t)TOF_Serial.read();

  //get length and create a buffer Array.
  while (TOF_Serial.available() == 0);
  len = (uint8_t)TOF_Serial.read() + 1;

  //read Data
  for (count = 0; count < len; count++) {
    while (TOF_Serial.available() == 0);
    Temp = (byte)TOF_Serial.read();
    _buffer[count] = Temp;
  }

  TOF_Serial.end();

  //check validation(Sum-Check)
  checksum = 0x5a + 0x5a + Type + len - 1;
  for (count = 0; count < len - 1; count++) {
    checksum += (uint16_t)_buffer[count];
  }
  if (byte(checksum % 256) != _buffer[len - 1]) return 14; // Invalid Value

  //After validation, return the measurement values and state.
  TOF_results[0] = (int)(_buffer[0] << 8) | _buffer[1] ;
  TOF_results[1] = (int)_buffer[2] >> 4;

  return TOF_results[1];
}


int FastRSSI()
{
  String _ident = ":-";
  String _buffer = "";
  int result;
  uint8_t count;
  uint8_t i = 0x02;

  BeginSerial(IBE);

  //** detect ":-"
  count = 0;
  while (count < 2) {
    while (IBE_Serial.available() == 0);
    if ((char)IBE_Serial.read() == _ident.charAt(count))
      count++;
    else
      count = 0;
  }

  //** get RSSI into _buffer[times]
  i = 0x02;
  while (i) {
    if (IBE_Serial.available() > 0) {
      _buffer += (char)IBE_Serial.read();
      i = i >> 1;
    }
  }

  IBE_Serial.end();

  //** get RSSI and validation(low pass filter)
  result = -1 * (int)_buffer.toInt();
  //if (result[j] > -10) continue;

  return result;
}

/* Read IMU
  int ReadIMU(uint8_t type = isYPR)
  {
  byte _buffer[30];
  byte Temp = 0;
  uint8_t count = 0;
  uint8_t len = 0;
  uint16_t checksum = 0;

  BeginSerial(IMU);

  //detect starting identication
  count = 2;
  while (count > 0) {
    while (IMU_Serial.available() == 0);
    Temp = (byte)IMU_Serial.read();
    if (Temp == 0xa5) {
      count = 1;
    } else if ((Temp == 0x5a) && (count == 1)) {
      count--;
    } else {
      count = 2;
    }
  }
  //get length and create a buffer Array.
  while (IMU_Serial.available() == 0);
  len = (uint8_t)IMU_Serial.read() - 1;

  //read Data
  for (count = 0; count < len; count++) {
    while (IMU_Serial.available() == 0);
    Temp = (byte)IMU_Serial.read();
    if ((Temp != 0xa1) && (count == 0)) return ReadIMU(type);  // Is YPR data?
    _buffer[count] = Temp;
  }

  IMU_Serial.end();

  //check validation(End-Count-Check)
  if (Temp != 0xaa) return ReadIMU(type);

  //check validation(Sum-Check)
  checksum = len + 1;
  for (count = 0; count < len - 2; count++) {
    checksum += (uint16_t)_buffer[count];
  }
  if (byte(checksum % 256) != _buffer[len - 2]) return ReadIMU(type);

  //After validation, update values to IntYPR[].
  for (count = 0; count < 6; count++) {
    IntYPR[count] = ((int16_t)_buffer[count * 2 + 1] << 8) + _buffer[(count + 1) * 2];
    if ((IntYPR[count] < 0) && (count != 5)) IntYPR[count] = 32768 - IntYPR[count];
  }
  IntYPR[HIGHT] = IntYPR[HIGHT] - 50000;
  return 0;
  }
*/

int _Avrage_of(int* Arr, uint8_t len)
{
  int result = 0;
  for (uint8_t i = 0; i < len; i++) {
    result = result + Arr[i];
  }
  return (result / len);
}

/*
  EEProj::Vector<2> LeastSquareMethod(const int *Arr, const uint8_t len)
  { // Output: y = ax + b; a is slope, b is y-axis value.
  double a, b;
  double t1 = 0, t2 = 0, t3 = 0, t4 = 0;
  for (int x = 0; x < len; x++)   {
    t1 += (x + 1) * (x + 1);
    t2 += (x + 1);
    t3 += (x + 1) * Arr[x];
    t4 += Arr[x];
  }
  a = (t3 * len - t2 * t4) / (t1 * len - t2 * t2);
  b = (t1 * t4 - t2 * t3) / (t1 * len - t2 * t2);
  return EEProj::Vector<2>(a, b);
  }
*/
/*
  void displayMSM()
  {
  delay(20);
  while (BTO_Serial.available() > 0) {
    Serial.write(char(int(BTO_Serial.read())));
    delay(2);
  }
  delay(20);
  Serial.println("");
  }
*/

void SetMotor(const uint8_t& MotorType, const boolean& DIR, const uint8_t& PWM)
{
  //MotorType: 0 = Left, 1 = Right, 2 = Center
  //DIR: 0 = Positive, 1 = Negative
  //PWM: 0 - 255

  //int SpeedValue = (int)(pow(-1, DIR) * map(PWM, 0, 255, 0, 100));
  //String SpeedValueInPercent = String(SpeedValue);
  //String result = "ERROR_from_function: SetMotor(uint8_t MotorType, boolean DIR, uint8_t PWM)";

  switch (MotorType) {
    case LEFT:
      analogWrite(MOTOR_L_PWM, PWM);
      digitalWrite(MOTOR_L_DIR, DIR);
      //result = SpeedValueInPercent + "% is now left motor speed";
      break;

    case RIGHT:
      analogWrite(MOTOR_R_PWM, PWM);
      digitalWrite(MOTOR_R_DIR, DIR);
      //result = SpeedValueInPercent + "% is now right motor speed";
      break;

    case UPWARD:
      analogWrite(MOTOR_U_PWM, PWM);
      digitalWrite(MOTOR_U_DIR, DIR);
      //result = SpeedValueInPercent + "% is now upward motor speed";
      break;
  }
  //return result;
}


void SetMotor_InPercent(const uint8_t& MotorType, const int& Speed)
{
  int PWM = abs(Speed) * 2.55;
  int DIR;
  if (Speed >= 0) {
    DIR = false;
  } else {
    DIR = true;
  }
  SetMotor(MotorType, DIR, PWM);
}


void Helmsman(const int& Power, const int& Bias)
{
  int8_t LFactor;
  int8_t RFactor;
  /*
  if ((Bias >= 0) && (Bias <= 50)) {
    LFactor = 100;
    RFactor = map(Bias, 0, 50, 100, -100);

  } else if (Bias >= 50) {
    int temp = Bias;
    if (Bias > 100) temp = 100;
    LFactor = map(temp, 50, 100, 100, -100);
    RFactor = -100;

  } else if ((Bias < 0) && (Bias >= -50)) {
    LFactor = map(Bias, -50, 0, -100, 100);
    RFactor = 100;

  } else if (Bias <= -50) {
    int temp = Bias;
    if (Bias > 100) temp = -100;
    LFactor = -100;
    RFactor = map(temp, -100, -50, -100, 100);

  } else
    return;
  */

  if (Bias >= 0) {
    RFactor = Power;
    LFactor = Power + Bias;
  } else {
    RFactor = Power - Bias;
    LFactor = Power;
  }
  

  if (LFactor > 100) LFactor = 100;
  if (LFactor < -100) LFactor = -100;
  if (RFactor > 100) RFactor = 100;
  if (RFactor < -100) RFactor = -100;
  

  SpeedOf[LEFT] = LFactor;
  SpeedOf[RIGHT] = RFactor;
}

/*
  void BTO_Initualize()
  {
  String MSM;
  BTO_Serial.println("AT");
  Serial.print("[[[AT-Mode beginning]]]  ");
  displayMSM();
  BTO_Serial.println("AT+ADVI0");
  Serial.print("[[[Setting Advertising interval to 100ms (the Fastest)]]]  ");
  displayMSM();
  BTO_Serial.println("AT+NAMEGROUP-02");
  Serial.print("Setting BT Module Name on Arduino:  ");
  displayMSM();
  BTO_Serial.println("AT+ROLE0");
  Serial.print("Setting ROLE to Slave:  ");
  displayMSM();
  BTO_Serial.println("AT+TYPE0");
  Serial.print("Setting no-need-PSWD mode:  ");
  displayMSM();
  }
*/

void Serials_Initualize()
{
  pinMode(IMU_RX, INPUT);
  pinMode(IBE_RX, INPUT);
  pinMode(BTO_RX, INPUT);
  pinMode(TOF_RX, INPUT);
  pinMode(BTO_TX, OUTPUT);
  pinMode(IMU_TX, OUTPUT);
  pinMode(IBE_TX, OUTPUT);
  pinMode(TOF_TX, OUTPUT);
  Serial.begin(BAUD_RATE);
}


void Motor_Initualize()
{
  pinMode(MOTOR_L_PWM, OUTPUT);
  pinMode(MOTOR_L_DIR, OUTPUT);
  pinMode(MOTOR_U_PWM, OUTPUT);
  pinMode(MOTOR_U_DIR, OUTPUT);
  pinMode(MOTOR_R_PWM, OUTPUT);
  pinMode(MOTOR_R_DIR, OUTPUT);
}




//*********(  Main Functions  )*********\\

void setup()
{
  Serials_Initualize();  // initualize Serial Pins
  Motor_Initualize();  // initualize Motor Pins
  /*
    BTO_Initualize();
    Waiting4Connect();
  */

  lastTime_RSSI = micros();
  lastTime_Height = micros();
}

void loop()
{
  Serial.println("start");
  Serial.println("Testing PID Control");

  // initualize Targets
  SpeedOf[RIGHT] = 0;
  int Target_Height = 1600;
  int Target_RSSI_CW = -40;
  int Output_RSSI_CW;
  int Output_Height;
  int rRSSI;
  //Initualize Moving Average
  /*
  for (int8_t ji = 0; ji < nRSSI - 1; ji++) {
    ArrRSSI[ji] = FastRSSI();
    Serial.println("lo");
  }
  */

  while (1) {
Serial.println("looping");
    //1. Measurment and feedback
    //** RSSI
    //for (int8_t ji = 1; ji < nRSSI; ji++) {
    //  ArrRSSI[ji - 1] = ArrRSSI[ji];
    //}
    //ArrRSSI[nRSSI - 1] = FastRSSI();
    //Serial.print(_Avrage_of(ArrRSSI, nRSSI));
    //Serial.print(", ");
    //int FdBack_RSSI_CW = _Avrage_of(ArrRSSI, nRSSI);

    rRSSI = FastRSSI();
    Serial.print(rRSSI);
    Serial.print(", ");
    
    //** Height
    while (readTOF() > 0);
    //int FdBack_Height = EEProj::Vector<1>(TOF_results[DISTANCE]);
    Serial.print(TOF_results[DISTANCE]);
    Serial.print(", ");


    //2. PID Calculation
    //** RSSI
    PID_RSSI_CW.newInput(EEProj::Vector<1>(rRSSI - Target_RSSI_CW), false, micros() - lastTime_RSSI);
    lastTime_RSSI = micros();
    //** Height
    PID_Height.newInput(EEProj::Vector<1>(Target_Height - TOF_results[DISTANCE]), abs(SpeedOf[UPWARD]) >= 50, micros() - lastTime_Height);
    lastTime_Height = micros();


    //3. PID Result / Pre-process
    //** RSSI
    Output_RSSI_CW = PID_RSSI_CW.get_pid().x();
    //** Height
    Output_Height = PID_Height.get_pid().x();

    Serial.println(Output_RSSI_CW);


    //4. Limit and Translate Output
    //** RSSI
    Helmsman(power, Output_RSSI_CW);

    //** Height
    if (abs(Output_Height) <= 100)
      SpeedOf[UPWARD] = Output_Height;
    else if (Output_Height < 0)
      SpeedOf[UPWARD] = -100;
    else if (Output_Height > 0)
      SpeedOf[UPWARD] = 100;

    //5. Output
    SetMotor_InPercent(RIGHT,  -SpeedOf[RIGHT]);
    SetMotor_InPercent(LEFT,   -SpeedOf[LEFT]);
    SetMotor_InPercent(UPWARD, -SpeedOf[UPWARD]);

  }


}